import Head from "next/head";
import { api } from "~/utils/api";
import Image from "next/image";
import therapist from "/public/media/therapist-02.png";
import userAvatar from "/public/media/user-02.png";
import { ThreeDots } from "react-loader-spinner";

import { useState } from "react";
import useScreenSize from "~/hooks/screenSize";

interface State {
  prompt: string;
  userPrompts: string[];
  therapistAnswer: string[];
  isThearapistTyping: boolean;
}

export default function Home() {
  const mutation = api.langchain.chat.useMutation({
    onSuccess: (data) => {
      if (data) {
        setState((prevState) => ({
          ...prevState,
          therapistAnswer: [...prevState.therapistAnswer, data],
          isThearapistTyping: false,
        }));
      }
    },
  });

  const [state, setState] = useState<State>({
    prompt: "",
    userPrompts: [],
    therapistAnswer: [],
    isThearapistTyping: false,
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setState({
      ...state,
      prompt: e.target.value,
    });
  };

  const screenHeight = (useScreenSize()?.height as number) - 100;

  const handlePrompt = async () => {
    setState((prevState) => ({
      ...prevState,
      userPrompts: [...prevState.userPrompts, prevState.prompt],
      prompt: "",
      isThearapistTyping: true,
    }));
    await mutation.mutate({ prompt: state.prompt });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div
          className="top-0 flex w-full flex-col items-start justify-start gap-4 overflow-scroll p-8"
          style={{ height: `${screenHeight}px` }}
        >
          <div className="flex w-full flex-row items-start justify-start gap-6 md:items-center">
            <Image
              src={therapist}
              sizes="100vw"
              unoptimized
              style={{
                width: "96px",
                height: "96px",
              }}
              alt="therapist-01"
            />
            <p className="rounded-md bg-[#2e8b57] p-3 text-sm font-normal text-white">
              Hello, I am your AI therapist. How can I help you today?
            </p>
          </div>

          {state.userPrompts.map((prompt, index) => (
            <div
              key={index}
              className="flex w-full flex-col items-center justify-start gap-6"
            >
              {/* User message */}
              <div className="flex w-full flex-row items-center justify-end gap-6 md:items-center">
                <p className="rounded-md bg-[#264577] p-3 text-sm font-normal text-white">
                  {prompt}
                </p>
                <Image
                  src={userAvatar}
                  sizes="100vw"
                  unoptimized
                  style={{
                    width: "96px",
                    height: "96px",
                  }}
                  alt="user-avatar"
                />
              </div>

              {/* Therapist response */}
              {state.therapistAnswer[index] && (
                <div className="flex w-full flex-row items-start justify-start gap-6 md:items-center">
                  <Image
                    src={therapist}
                    sizes="100vw"
                    unoptimized
                    style={{
                      width: "96px",
                      height: "96px",
                    }}
                    alt="therapist-avatar"
                  />
                  <p className="rounded-md bg-[#2e8b57] p-3 text-sm font-normal text-white">
                    {state.therapistAnswer[index]}
                  </p>
                </div>
              )}
            </div>
          ))}

          {state.isThearapistTyping && (
            <div className="flex w-full flex-row items-start justify-start gap-6 md:items-center">
              <ThreeDots
                visible={true}
                height="80"
                width="80"
                color="#4fa94d"
                radius="9"
                ariaLabel="three-dots-loading"
              />
            </div>
          )}
        </div>

        <div className="absolute bottom-0 flex w-full flex-row items-center justify-start gap-4 p-8">
          <input
            type="text"
            className="w-full rounded-lg px-4 py-2 font-semibold text-[#15162c]"
            value={state.prompt}
            onChange={handleChange}
          />
          <button
            onClick={handlePrompt}
            className="w-48 rounded-lg bg-[#f9a826] px-4 py-2 font-semibold text-[#15162c]"
          >
            Send Message
          </button>
        </div>
      </main>
    </>
  );
}
